		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Liang Jia Jiang <liangjia@buffalo.edu>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

(need answer)>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

(need answer)>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r uses an extra argument that allows us to use saveptr, which is pointer that allow us to reuse strings. 
We can also parse different strings concurrently using strtok_r giving different saveptr arguments.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One of the advantages of of the shell is from a security aspect,
since commands can come in any range, good or bad, using a shell to separate commands
allow the shell to help looking for unsafe command line before they reach the kernel.
This also helps reduce the work of the kernel.

In Unix-like systems we are allow to do alot of more complicated operations, such as piping and redirecting,
while in the Pintos' approch we have to add alot more code in the kernel to achieve those same operations.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

(need answer)>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

In our implementation file descriptors are unique within the single processes.
When a process opens a file a file descriptor is created and added to the tread stack.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We first validate all pointers and accessers before we do a direct access,
this is to make sure that all pointers are valid before we do any access to 
memory which can cause memory errors.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

When a full page call is requested, the lest number of time it could be call would be 1,
if pagedir_get_page() is not validated, the data will be stored on a single page, then 
memcpy would pass the pointer returned by pagedir_get_page()

the greatest number of times it could be call is 4096, the data would be distributed
in segments across all 4096 pages, then memcpy would pass the pointer returned by pagedir_get_page()
4096 times.

(need answer)>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

(need answer)>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

(need answer)>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

The parent process will be holding a semaphore until the child process exits, after the
child processes exit, the wait struct will still exist. However since the parent process
was holding the semaphore it is now set to have a value of 1 so the parent can now call 
sys_wait and it'll be returned. The parent will also be accountable for taking call of
all resources therefore it can be deleted one the parent is dead.


---- RATIONALE ----

(need answer)>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

(need answer)>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

we did not change the defualt mapping of tid_t to pid_t

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
