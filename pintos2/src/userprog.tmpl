		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Liang Jia Jiang <liangjia@buffalo.edu>
Venkata Ramesh Thetakali <vthetaka@buffalo.edu>
Rohan Shah <rmshah2@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We did not specify any new struct variables for argument passing. However, we added some variables in process_excecute() of process.c. These are shown below
  	char *f_name;  //pointer for file name of user program
 	struct thread *t //pointer for current thread running the program


---- ALGORITHMS ----

A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

A user program has arguments in the form
<program name> <arg1> <arg2> … <argn>

The first argument is the filename to load user program and the remaining args are program arguments separated by delimiter “ “.A function strtok_r() from string.c is used to tokenize the string into arguments. The tokenized arguments are placed in vector using to the code below

/* Tokenize the arguments and add them to the argument vector */


  argc = 0;
  argv_off = malloc (32 * sizeof (int)); //max args can be 32
  if (!argv_off)
    goto exit;
  file_name_len = strlen (file_name);
  argv_off[0] = 0;
  for (
       token = strtok_r (file_name, " ", &save_ptr);
       token != NULL;
       token = strtok_r (NULL, " ", &save_ptr)
       )
        {
          while (*(save_ptr) == ' ')
            ++save_ptr;
          argv_off[++argc] = save_ptr - file_name;
        }

Once, the args list is generated, these args can be pushed into the stack. The code is given below:

//setting up arguments stack

filesys_open (file_name);          //open file with file_name
      file_deny_write (t->self);	//block file access to other threads
      if_.esp -= file_name_len + 1;
      start = if_.esp;
      memcpy (if_.esp, file_name, file_name_len + 1);
      if_.esp -= 4 - (file_name_len + 1) % 4; /* alignment */
      if_.esp -= 4;
      *(int *)(if_.esp) = 0; /* argv[argc] == 0 */
      /* pushing args into the stack */
      for (i = argc - 1; i >= 0; --i)
        {
          if_.esp -= 4;
          *(void **)(if_.esp) = start + argv_off[i]; /* argv[x] */
        }

	// initialize the stack address
      if_.esp -= 4;
      *(char **)(if_.esp) = (if_.esp + 4); /* argv */
      if_.esp -= 4;
      *(int *)(if_.esp) = argc;
      if_.esp -= 4;
      *(int *)(if_.esp) = 0; //fake return address

In the first part arguments are pushed into the stack from right to left, so that top of stack contains program name and the second last element in the stack is the no. of args and a fake return address is added to the end of the stack.

To avoid overflowing the stack,a restriction is kept on the total space of the arguments to be less than one page.

Finally, page_fault() in /userprog/exception.c is extended to handle page fault exceptions, if the user tries to access a null pointer, a pointer to unmapped virtual memory, or a pointer to kernel virtual address space (above PHYS_BASE). The code is shown below.

t = thread_current ();
  	if (not_present || (is_kernel_vaddr (fault_addr) && user))
    sys_exit (-1);


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r uses an extra argument that allows us to use saveptr, which is pointer that allow us to reuse strings. 
We can also parse different strings concurrently using strtok_r giving different saveptr arguments.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One of the advantages of of the shell is from a security aspect,
since commands can come in any range, good or bad, using a shell to separate commands
allow the shell to help looking for unsafe command line before they reach the kernel.
This also helps reduce the work of the kernel.

In Unix-like systems we are allow to do alot of more complicated operations, such as piping and redirecting,
while in the Pintos' approch we have to add alot more code in the kernel to achieve those same operations.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In syscall.c

typedef int pid_t;    //process Id for current thread
struct fd_elem        //struct for file descriptor
  {
    int fd;
    struct file *file;
    struct list_elem elem;
    struct list_elem thread_elem;
  };

static struct lock file_lock;   //lock variable for file lock

static struct list file_list;  //list variable to track open files


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

In our implementation file descriptors are unique within the single processes.
When a process opens a file a file descriptor is created and added to the tread stack.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We first validate all pointers and accessers before we do a direct access,
this is to make sure that all pointers are valid before we do any access to 
memory which can cause memory errors.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

When a full page call is requested, the lest number of time it could be call would be 1,
if pagedir_get_page() is not validated, the data will be stored on a single page, then 
memcpy would pass the pointer returned by pagedir_get_page()

the greatest number of times it could be call is 4096, the data would be distributed
in segments across all 4096 pages, then memcpy would pass the pointer returned by pagedir_get_page()
4096 times.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Our system_call wait calls process_wait() to find the thread by tid_t passed into process_wait()and then checks the thread status if it’s alive or not and if the check fails, -1 is returned informing that the thread was killed due to an exception. Otherwise, a semaphore is used to 
block the thread and set the return_code. Next we unblock the thread and set the thread 'waiting' and return its return_code.

int
process_wait (tid_t child_tid) 
{
  struct thread *t;
  int ret;
  ret = -1;
  t = get_thread_by_tid (child_tid);
  if (!t || t->status == THREAD_DYING || t->ret_status == RET_STATUS_INVALID)
    goto done;
  if (t->ret_status != RET_STATUS_DEFAULT && t->ret_status != RET_STATUS_INVALID)
    {
      ret = t->ret_status;
      goto done;
    }

  sema_down (&t->wait);
  ret = t->ret_status;
  printf ("%s: exit(%d)\n", t->name, t->ret_status);
  while (t->status == THREAD_BLOCKED)
    thread_unblock (t);
  
done:
  t->ret_status = RET_STATUS_INVALID;
  return ret;
}


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We try to check each address is a valid address in user memory before reading any data,
so that an invalid reference to the system call number, the arguments, or any buffer data
associated with the arguments results in a fault which is caught in exception.c and thrown
to the user.Also, we immediately call sys_exit, which handles freeing the stack, cleans up all children, and closes any open files.

This code is written in page_fault() method of exception.c to handle all page faults and invalid references

t = thread_current ();
  	if (not_present || (is_kernel_vaddr (fault_addr) && user))
    sys_exit (-1);

Example: Suppose the user calls a system call for write, syscall 9, and passes an invalid address to the buffer. When parsing the arguments, a page fault will occur when we attempt to read the location of the buffer. Therefore, sys_exit will be called and all resource cleanup will be handled appropiately.

Example: Suppose the user calls an invalid system call, syscall 537. After reading the system call number successfully, the syscall handler will call sys_exit. Then, all resource cleanup will be handled appropiately.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Our "exec" system_call (syscall_exec) calls process_execute() which creates
a new thread to run the executable. Once the thread is completed, we wait on 
the thread to complete by checking the thread status, and calling process_wait
if the return_code is invalid until the thread completes.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

The parent process will be holding a semaphore until the child process exits, after the
child processes exit, the wait struct will still exist. However since the parent process
was holding the semaphore it is now set to have a value of 1 so the parent can now call 
sys_wait and it'll be returned. The parent will also be accountable for taking call of
all resources therefore it can be deleted one the parent is dead.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

The Access to memory from he kernel guarantees faster response time, versus the user level access. It also provides a gateway for kernel system calls to be ignited quicker. 


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Our design for file descriptors is very lean however it has CPU and memory overhead attached to it. To detect a file type, the memory reads the descriptor piece of information from the packet head and determines the compatibility interactively every single string, this has a time overhead attached to it, however it also guarantees accurate results in every iteration. 


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

we did not change the defualt mapping of tid_t to pid_t

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
